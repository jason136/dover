(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: setup, main */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setup\", function() { return setup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"main\", function() { return main; });\nclass Chart {}\r\nconst canvas = document.getElementById(\"canvas\");\r\nconst status = document.getElementById(\"status\");\r\nconst error = document.getElementById(\"error\");\r\nlet chart;\r\n\r\nconst form = document.getElementById('form');\r\n\r\nfunction setup(WasmChart) {\r\n    Chart = WasmChart;\r\n}\r\n\r\nfunction setupCanvas() {\r\n    let width = window.innerWidth - 60;\r\n    let height = window.innerHeight - 100;\r\n    canvas.style.width = width + \"px\";\r\n    canvas.style.height = height + \"px\";\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    chart.full_draw();\r\n}\r\n\r\nfunction main() {\r\n    chart = Chart.new(canvas);\r\n\r\n    let example_dxdt = \"y\";\r\n    let example_dydt = \"-x-y\";\r\n    document.getElementById(\"dxdt\").value = example_dxdt;\r\n    document.getElementById(\"dydt\").value = example_dydt;\r\n    // document.getElementById(\"delta_t\").value = \"0.001\";\r\n    chart.set_equations(example_dxdt, example_dydt)\r\n\r\n    status.innerText = \"WebAssembly loaded!\";\r\n    setupCanvas();\r\n    window.addEventListener(\"resize\", setupCanvas);\r\n    \r\n    let last_mouse_x = null;\r\n    let last_mouse_y = null;\r\n    let drag = (e) => {\r\n        e.preventDefault();\r\n        if (last_mouse_x !== null) {\r\n            const dx = e.offsetX - last_mouse_x;\r\n            const dy = e.offsetY - last_mouse_y;\r\n            chart.move_offset(-dx, dy);\r\n            last_mouse_x += dx;\r\n            last_mouse_y += dy;\r\n        }\r\n    };\r\n\r\n    let require_full_draw = false;\r\n    canvas.onmousedown = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (e.button === 2) {\r\n            canvas.addEventListener('contextmenu', (e) => e.preventDefault());\r\n            last_mouse_x = e.offsetX;\r\n            last_mouse_y = e.offsetY;\r\n            window.addEventListener('mousemove', drag, true);\r\n            require_full_draw = true;\r\n        }\r\n        if (e.button === 0) {\r\n            let actualRect = canvas.getBoundingClientRect();\r\n            let logicX = e.offsetX * canvas.width / actualRect.width;\r\n            let logicY = e.offsetY * canvas.height / actualRect.height;\r\n            const mouse_pos = chart.coord(logicX, logicY);\r\n            chart.add_line(mouse_pos.x, mouse_pos.y);\r\n        }\r\n    };\r\n\r\n    window.onmouseup = () => {\r\n        if (require_full_draw) {\r\n            chart.full_draw();\r\n            require_full_draw = false;\r\n        }\r\n        last_mouse_x = null;\r\n        last_mouse_y = null;\r\n        canvas.removeEventListener('contextmenu', (e) => e.preventDefault());\r\n        window.removeEventListener('mousemove', drag, true);\r\n    }\r\n\r\n    canvas.addEventListener('wheel', (e) => {\r\n      e.preventDefault();\r\n\r\n      let actualRect = canvas.getBoundingClientRect();\r\n      let logicX = e.offsetX * canvas.width / actualRect.width;\r\n      let logicY = e.offsetY * canvas.height / actualRect.height;\r\n      const mouse_pos = chart.coord(logicX, logicY);\r\n      chart.zoom((e.deltaY || -e.detail) < 0, mouse_pos.x, mouse_pos.y);\r\n      error.innerText = `position: ${mouse_pos.x}, ${mouse_pos.y}`;\r\n    });\r\n    \r\n    document.getElementById (\"points\").addEventListener('click', () => {\r\n        const points = Array.from(chart.get_points());\r\n\r\n        let w = window.open(\"\");\r\n        w.document.write(`\r\n            <table style=\"width:50%\">\r\n            <tr>\r\n                <td>T</td>\r\n                <td>X</td>\r\n                <td>Y</td>\r\n            </tr>\r\n        `);\r\n        while (points.length > 0) {\r\n            const t = points.shift();\r\n            const x = points.shift();\r\n            const y = points.shift();\r\n            w.document.write(`\r\n                <tr>\r\n                    <td>${t}</td>\r\n                    <td>${x}</td>\r\n                    <td>${y}</td>\r\n                </tr>\r\n            `);\r\n        }\r\n        w.document.write(\"</table>\");\r\n    });\r\n\r\n    document.getElementById (\"download\").addEventListener('click', () => {\r\n        const points = Array.from(chart.get_points());\r\n        let csvContent = \"data:text/csv;charset=utf-8,\";\r\n\r\n        csvContent += \"T,X,Y\\r\\n\";\r\n        for (let i = 0; i < points.length; i += 3) {\r\n            const t = points[i];\r\n            const x = points[i+1];\r\n            const y = points[i+2];\r\n            csvContent += `${t},${x},${y}\\r\\n`;\r\n        }\r\n\r\n        let encodedUri = encodeURI(csvContent);\r\n        let link = document.createElement(\"a\");\r\n        link.setAttribute(\"href\", encodedUri);\r\n        link.setAttribute(\"download\", \"points.csv\");\r\n        document.body.appendChild(link);\r\n        link.click();\r\n    });\r\n\r\n    document.getElementById (\"reset\").addEventListener('click', () => {\r\n        chart.clear();\r\n    });\r\n\r\n    function load_functions() {\r\n        const formData = new FormData(form);\r\n        const { dxdt, dydt } = Object.fromEntries(formData.entries());\r\n        let error = chart.set_equations(dxdt, dydt);\r\n        console.log(error);\r\n    }\r\n    document.getElementById (\"dxdt\").addEventListener('change', (e) => load_functions());\r\n    document.getElementById (\"dydt\").addEventListener('change', (e) => load_functions());\r\n}\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);